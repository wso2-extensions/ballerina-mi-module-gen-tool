/*
 * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

plugins {
    id "de.undercouch.download" version "5.4.0"
}

description = 'Ballerina MI Module Gen Tool'

def packageName = "mi_module_gen"
def toolId = "mi-module-gen"
def packageOrg = "wso2"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")

def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def balToolTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/BalTool.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def balToolTomlFile = new File("$project.projectDir/BalTool.toml")

apply plugin: 'io.ballerina.plugin'

ballerina {
    testCoverageParam = "--code-coverage --coverage-format=xml"
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", '')
    }
}

configurations {
    balTools
}

dependencies {
    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@toml.version@", tomlVersion)
        ballerinaTomlFile.text = newConfig

        def newToolConfig = balToolTomlFilePlaceHolder.text.replace("@toml.version@", tomlVersion)
        balToolTomlFile.text = newToolConfig
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the toml files\" Ballerina.toml Dependencies.toml "
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the toml files' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

tasks.register('localPublish') {
    doLast {
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', "/c", "bal pack && bal push --repository=local && bal tool pull ${toolId}:${tomlVersion} --repository=local"
            } else {
                commandLine 'sh', "-c", "bal pack && bal push --repository=local && bal tool pull ${toolId}:${tomlVersion} --repository=local"
            }
        }
        println("Successfully pushed the MI Tool to the local.")
    }
}

tasks.register('testLocalPublish') {
    doLast {
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', "/c", "$balCommand pack && $balCommand push --repository=local"
            } else {
                commandLine 'sh', "-c", "$balCommand pack && $balCommand push --repository=local"
            }
        }
        println("Successfully pushed the MI Tool to the local.")
    }
}

localPublish.dependsOn "build"
localPublish.dependsOn ":tool-mi-module-gen-cli:build"

task release {
    dependsOn("publishBallerinaPackage")
}

task publishBallerinaPackage {
    dependsOn(":tool-mi-module-gen-cli:build")
    doLast {
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', "/c", "$balCommand pack && $balCommand push"
            } else {
                commandLine 'sh', "-c", "$balCommand pack && $balCommand push"
            }
        }
        println("Successfully pushed the MI Tool to the central.")
    }
}



updateTomlFiles.dependsOn copyStdlibs
build.dependsOn ":tool-mi-module-gen-cli:build"
publishBallerinaPackage.dependsOn build
commitTomlFiles.dependsOn updateTomlFiles
