import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id "de.undercouch.download" version "5.4.0"
}

group = project.group
version = project.version

repositories {
    mavenCentral()
}

dependencies {
    implementation 'info.picocli:picocli:4.0.1'
    implementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-cli:${ballerinaLangVersion}"
    implementation "org.apache.ws.commons.axiom:axiom-api:${axiomVersion}"
    implementation "org.wso2.carbon.module:module-core:${carbonModuleCoreVersion}"
    implementation "org.apache.axis2.wso2:axis2:${axis2Version}"
    implementation "org.apache.synapse:synapse-core:${synapseVersion}"

    testImplementation 'org.testng:testng:7.7.0'
    implementation project(':mi-native')
    testImplementation project(path: ':tool-mi-module-gen-cli')
}

def projects = ['project2', 'project3']
def toolVersion = stripBallerinaExtensionVersion("${project.version}")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", '')
    }
}

task buildBallerinaProjects {
    doLast {
        def command = projects.collect { "$balCommand build src/test/resources/ballerina/$it" }.join(' && ')
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', "/c", command
            } else {
                commandLine 'sh', "-c", command
            }
        }
    }
}

task copyBallerinaJars(type: Copy) {
    dependsOn("buildBallerinaProjects")
    projects.each { project ->
        from("src/test/resources/ballerina/${project}/target/bin/${project}.jar")
        into('src/test/resources/libs')
    }
}
compileTestJava.dependsOn("copyBallerinaJars")
processTestResources.dependsOn("copyBallerinaJars")

test {
    systemProperty "bal.command", balCommand

    doFirst {
        try {
            exec {
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', "/c", "$balCommand tool pull mi-module-gen:$toolVersion --repository=local"
                } else {
                    commandLine 'sh', '-c', "$balCommand tool pull mi-module-gen:$toolVersion --repository=local"
                }
            }
        } catch (Exception e) {
            println("Test Run failed: " + e.message)
        }
    }

    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }

    dependencies {
        implementation fileTree(dir: 'src/test/resources/libs', include: '*.jar')
    }
}

test.dependsOn(":tool-mi-module-gen:testLocalPublish")
test.dependsOn(":tool-mi-module-gen-cli:build")
test.dependsOn(":tool-compiler-plugin:build")
