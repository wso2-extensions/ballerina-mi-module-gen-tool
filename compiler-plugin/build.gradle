/*
 * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

plugins {
    id 'java'
}

group = project.group
version = project.version

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'diagram-util', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'toml-parser', version: "${ballerinaLangVersion}"
    implementation group: 'com.github.jknack', name: 'handlebars', version: "${handlebarsVersion}"
    implementation group: 'org.apache.commons', name: 'commons-compress', version: "${commonsCompressVersion}"
    implementation group: 'org.ow2.asm', name: 'asm', version: "${asmVersion}"
}

task("copyFiles") {
    dependsOn ":mi-native:build"
    doLast {
        mkdir("src/main/resources/mediator-classes")
        copy {
            from("../native/build/classes/java/main")
            into("src/main/resources/mediator-classes")
        }
    }
}

jar {
    dependsOn("copyFiles")
    dependsOn("downloadDependencies")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from('src/main/resources') {
        include '**/*.class'
    }
}

task("deleteFolder") {
    delete("src/main/resources/mediator-classes")
}

clean.dependsOn("deleteFolder")

test {
    useJUnitPlatform()
}

task downloadDependencies(type: Download) {
    src([
            'https://repo1.maven.org/maven2/org/antlr/antlr4-runtime/4.5.1-1/antlr4-runtime-4.5.1-1.jar',
            'https://repo1.maven.org/maven2/com/github/jknack/handlebars/4.0.6/handlebars-4.0.6.jar'
    ])
    dest file("build")
    overwrite false
}
